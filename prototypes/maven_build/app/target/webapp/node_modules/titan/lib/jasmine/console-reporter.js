(function (jasmine, console) {
    var report = {
        modules: {},
        time: 0,
        count: 0,
        passed: 0,
        failures: 0
    };

    var reportReady = false;

    if (!jasmine) {
        throw 'jasmine library isn\'t loaded!';
    }

    var ConsoleReporter = function () {
        if (!console || !console.log) {
            throw 'console isn\'t present!';
        }
        this.status = this.statuses.stopped;
    };

    var proto = ConsoleReporter.prototype;

    proto.statuses = {
        stopped: 'stopped',
        running: 'running',
        fail: 'fail',
        success: 'success'
    };

    proto.reportRunnerStarting = function (runner) {
        this.status = this.statuses.running;
        this.start_time = (new Date()).getTime();
        this.executed_specs = 0;
        this.passed_specs = 0;

        this.suiteData = {};
    };

    proto.reportRunnerResults = function (runner) {
        var failed = this.executed_specs - this.passed_specs;
        var spec_str = this.executed_specs + (this.executed_specs === 1 ? ' spec, ' : ' specs, ');
        var fail_str = failed + (failed === 1 ? ' failure in ' : ' failures in ');
        var dur = (new Date()).getTime() - this.start_time;

        this.log('');
        this.log('------------------------------');
        this.log(spec_str + fail_str + (dur / 1000) + 's.');

        this.status = (failed > 0) ? this.statuses.fail : this.statuses.success;

        reportReady = true;
    };

    proto.reportSpecStarting = function (spec) {
        if (!this.suiteData.startTime) {
            this.suiteData.startTime = new Date();
            this.suiteData.tests = {};
        }
        this.suiteData.tests[spec.description] = {
            startTime: new Date(),
            failures: [],
            time: 0,
            success: false
        };
        this.executed_specs++;
    };

    proto.reportSpecResults = function (spec) {
        var startTime = this.suiteData.tests[spec.description].startTime;
        this.suiteData.tests[spec.description].time = ( new Date()).getTime() - startTime.getTime();
        this.suiteData.tests[spec.description].success = spec.results().passed();

        if (spec.results().passed()) {
            this.log(spec.suite.description + ' ' + spec.description + ' - passed');
            this.passed_specs++;
        } else {
            this.log(spec.suite.description + ' ' + spec.description + ' - failed');
            var items = spec.results().getItems();
            for (var i = 0; i < items.length; i++) {
                var trace = items[i].trace.stack || items[i].trace;
                this.log(trace);
            }
        }
    };

    proto.reportSuiteResults = function (suite) {
        var results = suite.results();
        report.modules[suite.description] = {
            tests: this.suiteData.tests,
            time: (new Date()).getTime() - this.suiteData.startTime.getTime(),
            count: results.totalCount,
            passed: results.passedCount,
            failures: results.totalCount - results.passedCount
        };

        this.suiteData = {};

        report.time += report.modules[suite.description].time;
        report.count += results.totalCount;
        report.passed += results.passedCount;
        report.failures += results.totalCount - results.passedCount;
    };

    proto.log = function (str) {
        console.log(str)
    };

    jasmine.ConsoleReporter = ConsoleReporter;

    window.getReport = function () {
        return report;
    };

    window.isReportReady = function () {
        return reportReady;
    };

})(jasmine, console);

